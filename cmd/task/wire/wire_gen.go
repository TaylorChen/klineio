// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"klineio/internal/job"
	"klineio/internal/repository"
	"klineio/internal/server"
	"klineio/internal/service"
	"klineio/internal/task"
	"klineio/pkg/app"
	"klineio/pkg/exchange"
	"klineio/pkg/log"
	"klineio/pkg/notifier"
)

// Injectors from wire.go:

func NewWire(conf *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	db := repository.NewDB(conf, logger)
	repositoryRepository := repository.NewRepository(logger, db)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userTask := task.NewUserTask(userRepository, logger)
	exchangePriceRepository := repository.NewExchangePriceRepository(repositoryRepository, logger)
	binanceClient := exchange.NewBinanceClient(logger, conf)
	okexClient := exchange.NewOKEXClient(logger, conf)
	string2 := provideDingTalkWebhookURL(conf)
	dingTalkNotifier := notifier.NewDingTalkNotifier(string2, logger)
	priceMonitorService := service.NewPriceMonitorService(exchangePriceRepository, binanceClient, okexClient, dingTalkNotifier, logger, conf)
	priceMonitorJob := job.NewPriceMonitorJob(priceMonitorService, logger)
	taskServer := server.NewTaskServer(logger, conf, userTask, priceMonitorJob)
	appApp := newApp(taskServer)
	return appApp, func() {
	}, nil
}

// wire.go:

// provideDingTalkWebhookURL provides the DingTalk webhook URL from config.
func provideDingTalkWebhookURL(conf *viper.Viper) string {
	return conf.GetString("dingtalk.webhook_url")
}

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewExchangePriceRepository)

var exchangeClientSet = wire.NewSet(exchange.NewBinanceClient, exchange.NewOKEXClient)

var notifierSet = wire.NewSet(notifier.NewDingTalkNotifier)

var serviceSet = wire.NewSet(service.NewPriceMonitorService)

var taskSet = wire.NewSet(task.NewTask, task.NewUserTask, job.NewPriceMonitorJob)

var serverSet = wire.NewSet(server.NewTaskServer)

// build App
func newApp(task2 *server.TaskServer,
) *app.App {
	return app.NewApp(app.WithServer(task2), app.WithName("klineio"))
}
